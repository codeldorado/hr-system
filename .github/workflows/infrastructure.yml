name: Infrastructure Deployment

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'infrastructure/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: eu-west-1
  TF_VERSION: 1.6.0

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      working-directory: infrastructure
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: infrastructure
      run: terraform init -backend=false

    - name: Terraform Validate
      working-directory: infrastructure
      run: terraform validate

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    strategy:
      matrix:
        environment: [dev, prod]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: infrastructure
      run: terraform init

    - name: Terraform Plan
      working-directory: infrastructure
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      run: |
        terraform plan \
          -var-file="environments/${{ matrix.environment }}.tfvars" \
          -out="terraform-${{ matrix.environment }}.tfplan"

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ matrix.environment }}
        path: infrastructure/terraform-${{ matrix.environment }}.tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: infrastructure
      run: terraform init

    - name: Terraform Apply
      working-directory: infrastructure
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
      run: |
        terraform apply \
          -var-file="environments/${ENVIRONMENT}.tfvars" \
          -auto-approve

    - name: Output Infrastructure Details
      working-directory: infrastructure
      run: |
        echo "## Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
        echo "### ALB URL" >> $GITHUB_STEP_SUMMARY
        terraform output alb_url >> $GITHUB_STEP_SUMMARY
        echo "### S3 Bucket" >> $GITHUB_STEP_SUMMARY
        terraform output s3_bucket_name >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: infrastructure
      run: terraform init

    - name: Terraform Destroy
      working-directory: infrastructure
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        ENVIRONMENT: ${{ github.event.inputs.environment }}
      run: |
        terraform destroy \
          -var-file="environments/${ENVIRONMENT}.tfvars" \
          -auto-approve
