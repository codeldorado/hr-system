name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: payslip-microservice
  ECS_SERVICE: payslip-microservice-dev-service
  ECS_CLUSTER: payslip-microservice-dev-cluster
  CONTAINER_NAME: app

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check app/
        isort --check-only app/

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        S3_BUCKET_NAME: test-bucket
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check AWS credentials
      id: check-aws
      run: |
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "AWS credentials not found. Skipping AWS operations."
          echo "aws-available=false" >> $GITHUB_OUTPUT
        else
          echo "AWS credentials found."
          echo "aws-available=true" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS credentials
      if: steps.check-aws.outputs.aws-available == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.check-aws.outputs.aws-available == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image
      if: steps.check-aws.outputs.aws-available == 'true'
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build backend Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

        # Push backend images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build Docker image locally (fallback)
      if: steps.check-aws.outputs.aws-available == 'false'
      id: build-local
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image locally (AWS credentials not available)..."
        docker build -t payslip-microservice:$IMAGE_TAG .
        docker build -t payslip-microservice:latest .
        echo "Local Docker build successful!"

        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image=payslip-microservice:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push frontend image
      if: steps.check-aws.outputs.aws-available == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        FRONTEND_REPOSITORY: payslip-frontend
      run: |
        # Build frontend Docker image
        docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY:$IMAGE_TAG ./frontend
        docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest ./frontend

        # Push frontend images to ECR
        docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest

    - name: Build frontend image locally (fallback)
      if: steps.check-aws.outputs.aws-available == 'false'
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building frontend Docker image locally (AWS credentials not available)..."
        docker build -t payslip-frontend:$IMAGE_TAG ./frontend
        docker build -t payslip-frontend:latest ./frontend
        echo "Local frontend Docker build successful!"

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Deploy to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --force-new-deployment

    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Update ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .github/task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.build.outputs.image-tag }}

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: payslip-microservice-prod-service
        cluster: payslip-microservice-prod-cluster
        wait-for-service-stability: true

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always() && (needs.deploy-dev.result != 'skipped' || needs.deploy-prod.result != 'skipped')

    steps:
    - name: Notify success
      if: needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success'
      run: |
        echo "Deployment successful!"
        # Add Slack/Teams notification here if needed

    - name: Notify failure
      if: needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure'
      run: |
        echo "Deployment failed!"
        # Add Slack/Teams notification here if needed
